// Settings.m
// MobileTerminal

#import "Settings.h"

#import <UIKit/UIKit.h>

#import "GestureSettings.h"
#import "MenuSettings.h"
#import "TerminalSettings.h"

// This file is autogenerated by the build rules
#import "svnversion.h"

@implementation Settings

@synthesize menuSettings;
@synthesize gestureSettings;
@synthesize terminalSettings;

static NSString* kSettingsKey = @"com.googlecode.mobileterminal.Settings";
static NSString* kVersionKey = @"version";
static NSString* kMenuSettings = @"menuSettings";
static NSString* kGestureSettings = @"gestureSettings";
static NSString* kTerminalSettings = @"terminalSettings";

static Settings* settings = nil;

+ (void)initialize
{
  Settings* settings = [[Settings alloc] initWithDefaultValues];
  NSData* data = [NSKeyedArchiver archivedDataWithRootObject:settings];
  [settings release];
  
  NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
  NSDictionary *appDefaults =
      [NSDictionary dictionaryWithObject:data forKey:kSettingsKey];
  [defaults registerDefaults:appDefaults];
}

+ (Settings*)sharedInstance
{
  if (settings == nil) {
    NSData* data = [[NSUserDefaults standardUserDefaults] dataForKey:kSettingsKey];  
    settings = [[NSKeyedUnarchiver unarchiveObjectWithData:data] retain];
  }
  return settings;
}

- (void)persist
{
  NSData* data = [NSKeyedArchiver archivedDataWithRootObject:self];
  [[NSUserDefaults standardUserDefaults] setObject:data forKey:kSettingsKey];
}

- (id) init
{
  return [self initWithCoder:nil];
}

- (id)initWithDefaultValues
{
  self = [self init];
  
  // TODO(allen): Put defaults values in an XML file.  Maybe using an XML file
  // would have been better than using NSUserDefaults.
  [menuSettings addMenuItem:[MenuItem itemWithLabel:@"ls" andCommand:@"ls"]];
  [menuSettings addMenuItem:[MenuItem itemWithLabel:@"ls -l" andCommand:@"ls -l\n"]];  
  [menuSettings addMenuItem:[MenuItem itemWithLabel:@"ssh" andCommand:@"ssh "]];  
  [menuSettings addMenuItem:[MenuItem itemWithLabel:@"locate" andCommand:@"locate"]];  
  [menuSettings addMenuItem:[MenuItem itemWithLabel:@"ping www.google.com" andCommand:@"ping www.google.com\n"]];  
  [menuSettings addMenuItem:[MenuItem itemWithLabel:@"^C" andCommand:@"\x03"]];  

  // Initialize the defaults from the .plist file.
  NSString* path =
    [[NSBundle mainBundle] pathForResource:@"GestureDefaults"
                                    ofType:@"plist"]; 
  NSDictionary* defaultLabels =
    [[NSDictionary alloc] initWithContentsOfFile:path];
  for (int i = 0; i < [gestureSettings gestureItemCount]; ++i) {
    GestureItem* item = [gestureSettings gestureItemAtIndex: i];
    NSString* actionLabel = [[defaultLabels objectForKey:[item name]] retain];
    if (actionLabel != nil) {
      item.actionLabel = actionLabel;
    }
    [actionLabel release];
  }
  
  return self;
}

- (id)initWithCoder:(NSCoder *)decoder
{
  self = [super init];
  if (self != nil) {
    if ([decoder containsValueForKey:kVersionKey]) {
      int version = [decoder decodeIntForKey:kVersionKey];
      NSLog(@"Settings previously written by: %d", version);
    }
    if ([decoder containsValueForKey:kMenuSettings]) {
      menuSettings = [[decoder decodeObjectForKey:kMenuSettings] retain];
    } else {
      menuSettings = [[MenuSettings alloc] init];
    }
    if ([decoder containsValueForKey:kGestureSettings]) {
      gestureSettings = [[decoder decodeObjectForKey:kGestureSettings] retain];
    } else {
      gestureSettings = [[GestureSettings alloc] init];
    }
    if ([decoder containsValueForKey:kTerminalSettings]) {
      terminalSettings = [[decoder decodeObjectForKey:kTerminalSettings] retain];
    } else {
      terminalSettings = [[TerminalSettings alloc] init];
    }
  }
  return self;
}

- (void) dealloc
{
  [menuSettings release];
  [gestureSettings release];
  [terminalSettings release];
  [super dealloc];
}

- (void)encodeWithCoder:(NSCoder *)encoder
{
  // include svn revision for future backwards compatibility
  [encoder encodeInt:SVN_VERSION forKey:kVersionKey];
  
  [encoder encodeObject:menuSettings forKey:kMenuSettings];
  [encoder encodeObject:gestureSettings forKey:kGestureSettings];
  [encoder encodeObject:terminalSettings forKey:kTerminalSettings];
}

@end
